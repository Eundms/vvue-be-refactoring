# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle + Docker Rolling Update

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches:
      - master
    types:
      - closed
permissions:
  contents: read

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/vvue-be-img
  IMAGE_TAG: vvue-be-img:${{ github.run_number }}-${{ github.sha }}

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: (1) Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: (2) Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: (3) Build with Gradle (Skip Test)
        run: ./gradlew clean build --exclude-task test

      - name: (4) Docker Image Build
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.run_number }}-${{ github.sha }} .

      - name: (5) DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: (6) DockerHub Push
        run: docker push ${{ env.IMAGE_NAME }}:${{ github.run_number }}-${{ github.sha }}

  ec2:
    name: Deploy to EC2 (Rolling Update)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: (7) Rolling Update on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            IMAGE_TAG=${{ github.run_number }}-${{ github.sha }}
            IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/vvue-be-img

            echo "Pulling new image: $IMAGE_NAME:$IMAGE_TAG"
            sudo docker pull $IMAGE_NAME:$IMAGE_TAG

            export IMAGE_TAG=$IMAGE_TAG

            # app1 rolling update
            sudo docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} stop app1
            sudo docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} rm -f app1
            sudo IMAGE_TAG=$IMAGE_TAG docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} up -d --no-deps app1

            sleep 5

            # app2 rolling update
            sudo docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} stop app2
            sudo docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} rm -f app2
            sudo IMAGE_TAG=$IMAGE_TAG docker-compose -f ${{ secrets.DOCKER_COMPOSE_FILE_PATH }} up -d --no-deps app2
